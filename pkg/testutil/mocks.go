// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/app/interface.go
//
// Generated by this command:
//
//	mockgen -source=pkg/app/interface.go -destination=pkg/testutil/mocks.go -package=testutil
//

// Package testutil is a generated GoMock package.
package testutil

import (
	reflect "reflect"

	cache "github.com/georgemblack/blue-report/pkg/cache"
	gomock "go.uber.org/mock/gomock"
)

// MockCache is a mock of Cache interface.
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
	isgomock struct{}
}

// MockCacheMockRecorder is the mock recorder for MockCache.
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance.
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCache) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCache)(nil).Close))
}

// ReadPost mocks base method.
func (m *MockCache) ReadPost(hash string) (cache.CachePostRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadPost", hash)
	ret0, _ := ret[0].(cache.CachePostRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadPost indicates an expected call of ReadPost.
func (mr *MockCacheMockRecorder) ReadPost(hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadPost", reflect.TypeOf((*MockCache)(nil).ReadPost), hash)
}

// ReadURL mocks base method.
func (m *MockCache) ReadURL(hash string) (cache.CacheURLRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadURL", hash)
	ret0, _ := ret[0].(cache.CacheURLRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadURL indicates an expected call of ReadURL.
func (mr *MockCacheMockRecorder) ReadURL(hash any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadURL", reflect.TypeOf((*MockCache)(nil).ReadURL), hash)
}

// SavePost mocks base method.
func (m *MockCache) SavePost(hash string, post cache.CachePostRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SavePost", hash, post)
	ret0, _ := ret[0].(error)
	return ret0
}

// SavePost indicates an expected call of SavePost.
func (mr *MockCacheMockRecorder) SavePost(hash, post any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SavePost", reflect.TypeOf((*MockCache)(nil).SavePost), hash, post)
}

// SaveURL mocks base method.
func (m *MockCache) SaveURL(hash string, url cache.CacheURLRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveURL", hash, url)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveURL indicates an expected call of SaveURL.
func (mr *MockCacheMockRecorder) SaveURL(hash, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveURL", reflect.TypeOf((*MockCache)(nil).SaveURL), hash, url)
}
